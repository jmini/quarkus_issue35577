plugins {
    id 'org.jetbrains.kotlin.jvm' version "1.9.10"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.9.10"
    id 'java'
    id 'io.quarkus'
}

tasks.register('printInfo2') {
    doLast {
        println(project(':core-lib').getTasksByName("compileKotlin", false).iterator().next().getClass())
        println(project(':core-lib').getTasksByName("compileKotlin", false).iterator().next() instanceof org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile)
        println(project(':core-lib').getTasksByName("compileKotlin", false).iterator().next() instanceof org.jetbrains.kotlin.gradle.tasks.KotlinCompile)
        println(project(':core-lib').getTasks().withType(org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile.class).size())
        println(project(':core-lib').getTasks().withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile.class).size())
        println(project(':core-lib').getTasks().getByName("compileKotlin").getClass())
    }
}

tasks.register('printInfo') {
    doLast {
        def mainSourceSet = project(':core-lib').sourceSets.main
        //def mainSourceSet = sourceSets.main
        println(mainSourceSet)

        println("all sources srcDirs: ")
        mainSourceSet.getAllSource().getSrcDirs().each {
            println("- " + it.getAbsolutePath().substring(project.getRootProject().getProjectDir().getAbsolutePath().length() + 1))
        }
        println("resources srcDirs: ")
        mainSourceSet.getResources().getSrcDirs().each {
            println("- " + it.getAbsolutePath().substring(project.getRootProject().getProjectDir().getAbsolutePath().length() + 1))
        }
        println("ouput ClassesDir: ")
        mainSourceSet.getOutput().getClassesDirs().each {
            println("- " + it.getAbsolutePath().substring(project.getRootProject().getProjectDir().getAbsolutePath().length() + 1))
        }
        println("ouput ClassesDir builtBy: ")
        (mainSourceSet.getOutput().getClassesDirs() as org.gradle.api.file.ConfigurableFileCollection).getBuiltBy().each {
            println("- " + it.get())
        }
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-arc'
    implementation 'io.quarkus:quarkus-resteasy-reactive'
    implementation project(':core-lib')
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}
compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}
